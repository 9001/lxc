diff -wNarU5 orig/CMakeLists.txt mod/CMakeLists.txt
--- orig/CMakeLists.txt
+++ mod/CMakeLists.txt
@@ -2,11 +2,11 @@
 project (Quiet)
 include(CheckLibraryExists)
 include(CheckIncludeFiles)
 include(CheckCCompilerFlag)
 
-set(QUIET_PROFILES_LOCATION "${CMAKE_INSTALL_PREFIX}/share/quiet/")
+set(QUIET_PROFILES_LOCATION "./")
 add_definitions(-DQUIET_PROFILES_LOCATION="${QUIET_PROFILES_LOCATION}quiet-profiles.json")
 
 if (CMAKE_C_COMPILER_ID MATCHES "GNU" OR CMAKE_C_COMPILER_ID MATCHES "Clang")
   if(CMAKE_BUILD_TYPE STREQUAL "Debug")
       add_definitions(-DQUIET_DEBUG)
@@ -35,11 +35,11 @@
 
 set(SRCFILES src/demodulator.c src/modulator.c src/utility.c src/decoder.c src/encoder.c src/profile.c src/error.c)
 set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
 
-set(CORE_DEPENDENCIES liquid jansson m)
+set(CORE_DEPENDENCIES liquid jansson m fec fftw3f)
 
 set(CMAKE_THREAD_PREFER_PTHREAD ON)
 find_package(Threads)
 if (CMAKE_USE_PTHREADS_INIT)
   add_definitions(-DRING_BLOCKING=1)
@@ -116,15 +116,12 @@
 
 
 add_library(quiet_static ${SRCFILES})
 target_link_libraries(quiet_static ${CORE_DEPENDENCIES})
 set_target_properties(quiet_static PROPERTIES OUTPUT_NAME "quiet")
-add_library(quiet SHARED ${SRCFILES})
-target_link_libraries(quiet ${CORE_DEPENDENCIES})
-set_target_properties(quiet PROPERTIES INSTALL_RPATH "@rpath/libquiet.dylib")
 
-add_custom_target(lib DEPENDS quiet quiet_static)
+add_custom_target(lib DEPENDS quiet_static)
 
 add_custom_target(quiet-h ALL COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/include/quiet.h ${CMAKE_BINARY_DIR}/include/quiet.h)
 
 if (PORTAUDIO_FOUND)
   add_custom_target(quiet-portaudio-h ALL COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/include/quiet-portaudio.h ${CMAKE_BINARY_DIR}/include/quiet-portaudio.h)
@@ -173,11 +170,11 @@
 add_custom_target(programs DEPENDS ${buildable_programs})
 
 install(FILES ${CMAKE_BINARY_DIR}/share/quiet-profiles.json DESTINATION ${QUIET_PROFILES_LOCATION})
 install(DIRECTORY ${CMAKE_BINARY_DIR}/include/ DESTINATION include)
 install(TARGETS ${buildable_programs}
-                quiet quiet_static
+                quiet_static
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib)
 
 add_custom_target(docs COMMAND cldoc generate -- --output docs/html --language=c ${CMAKE_BINARY_DIR}/include/quiet.h DEPENDS quiet-h)
diff -wNarU5 orig/programs/decode_file.c mod/programs/decode_file.c
--- orig/programs/decode_file.c
+++ mod/programs/decode_file.c
@@ -7,11 +7,11 @@
 #include <string.h>
 #include <sndfile.h>
 
 float freq2rad(float freq) { return freq * 2 * M_PI; }
 
-SNDFILE *wav_open(const char *fname, unsigned int *sample_rate) {
+SNDFILE *audiofile_open(const char *fname, unsigned int *sample_rate) {
     SF_INFO sfinfo;
 
     memset(&sfinfo, 0, sizeof(sfinfo));
 
     SNDFILE *f = sf_open(fname, SFM_READ, &sfinfo);
@@ -39,11 +39,11 @@
 }
 
 int decode_wav(FILE *payload, const char *wav_fname,
                quiet_decoder_options *opt) {
     unsigned int sample_rate;
-    SNDFILE *wav = wav_open(wav_fname, &sample_rate);
+    SNDFILE *wav = audiofile_open(wav_fname, &sample_rate);
 
     if (wav == NULL) {
         printf("failed to open wav file for reading\n");
         return 1;
     }
@@ -79,40 +79,54 @@
     wav_close(wav);
     return 0;
 }
 
 int main(int argc, char **argv) {
-    if (argc < 2 || argc > 4) {
-        printf("usage: decode_file <profilename> [<output_destination>]\n");
+    if (argc < 3 || argc > 5) {
+        printf("usage: decode_file <profilename> [<audiofile> [<output> [<profiles_path>]]]\n");
         exit(1);
     }
 
+    char *audiofile;
+    if ((argc <= 2 ) || strncmp(argv[2], "-", 2) == 0) {
+        audiofile = "/dev/stdout";
+    } else {
+        audiofile = argv[2];
+    }
+    
     FILE *output;
-    if ((argc == 2) || strncmp(argv[2], "-", 2) == 0) {
+    if ((argc == 3) || strncmp(argv[3], "-", 2) == 0) {
         output = stdout;
     } else {
-        output = fopen(argv[2], "wb");
+        output = fopen(argv[3], "wb");
         if (!output) {
-            fprintf(stderr, "failed to open %s: ", argv[2]);
+            fprintf(stderr, "failed to open %s: ", argv[3]);
             perror(NULL);
             exit(1);
         }
     }
 
+    char *profiles_path;
+    if (argc <= 4) {
+        profiles_path = QUIET_PROFILES_LOCATION;
+    } else {
+        profiles_path = argv[4];
+    }
+
     quiet_decoder_options *decodeopt =
-        quiet_decoder_profile_filename(QUIET_PROFILES_LOCATION, argv[1]);
+        quiet_decoder_profile_filename(profiles_path, argv[1]);
 
     if (!decodeopt) {
-        printf("failed to read profile %s from %s\n", argv[1], QUIET_PROFILES_LOCATION);
+        printf("failed to read profile %s from %s\n", argv[1], profiles_path);
         exit(1);
     }
 
 #ifdef QUIET_DEBUG
     decodeopt->is_debug = true;
 #endif
 
-    decode_wav(output, "encoded.wav", decodeopt);
+    decode_wav(output, audiofile, decodeopt);
 
     fclose(output);
     free(decodeopt);
 
     return 0;
diff -wNarU5 orig/programs/encode_file.c mod/programs/encode_file.c
--- orig/programs/encode_file.c
+++ mod/programs/encode_file.c
@@ -11,33 +11,43 @@
 
 float normalize_freq(float freq, float sample_rate) {
     return freq2rad(freq / (float)(sample_rate));
 }
 
-SNDFILE *wav_open(const char *fname, float sample_rate) {
+SNDFILE *audiofile_open(const char *fname, float sample_rate) {
     SF_INFO sfinfo;
 
+    uint32_t filetype = SF_FORMAT_RAW;
+    char *dot = strrchr(fname, '.');
+    if (dot && !strcmp(dot, ".wav"))
+        filetype = SF_FORMAT_WAV;
+
     memset(&sfinfo, 0, sizeof(sfinfo));
     sfinfo.samplerate = sample_rate;
     sfinfo.channels = 1;
-    sfinfo.format = (SF_FORMAT_WAV | SF_FORMAT_FLOAT);
+    sfinfo.format = (filetype | SF_FORMAT_FLOAT);
 
-    return sf_open(fname, SFM_WRITE, &sfinfo);
+    //fprintf(stderr, "+sf_open [%s]\n", fname);
+    SNDFILE *ret = sf_open(fname, SFM_WRITE, &sfinfo);
+    //fprintf(stderr, "-sf_open [%s]\n", fname);
+    return ret;
 }
 
 size_t wav_write(SNDFILE *wav, const quiet_sample_t *samples, size_t sample_len) {
     return sf_write_float(wav, samples, sample_len);
 }
 
 void wav_close(SNDFILE *wav) { sf_close(wav); }
 
 int encode_to_wav(FILE *payload, const char *out_fname,
                   const quiet_encoder_options *opt) {
-    SNDFILE *wav = wav_open(out_fname, sample_rate);
+    //fprintf(stderr, "+audiofile_open\n");
+    SNDFILE *wav = audiofile_open(out_fname, sample_rate);
+    //fprintf(stderr, "-audiofile_open\n");
 
     if (wav == NULL) {
-        printf("failed to open wav file for writing\n");
+        fprintf(stderr, "failed to open wav file for writing\n");
         return 1;
     }
 
     quiet_encoder *e = quiet_encoder_create(opt, sample_rate);
 
@@ -82,36 +92,50 @@
     wav_close(wav);
     return 0;
 }
 
 int main(int argc, char **argv) {
-    if (argc < 2 || argc > 4) {
-        printf("usage: encode_file <profilename> [<input_source>]\n");
+    if (argc < 2 || argc > 5) {
+        fprintf(stderr, "usage: encode_file <profilename> [<audiofile> [<input> [<profiles_path>]]]\n");
         exit(1);
     }
 
+    char *audiofile;
+    if ((argc <= 2 ) || strncmp(argv[2], "-", 2) == 0) {
+        audiofile = "/dev/stdout";
+    } else {
+        audiofile = argv[2];
+    }
+    
     FILE *input;
-    if ((argc == 2) || strncmp(argv[2], "-", 2) == 0) {
+    if ((argc <= 3) || strncmp(argv[3], "-", 2) == 0) {
         input = stdin;
     } else {
-        input = fopen(argv[2], "rb");
+        input = fopen(argv[3], "rb");
         if (!input) {
-            fprintf(stderr, "failed to open %s: ", argv[2]);
+            fprintf(stderr, "failed to open %s: ", argv[3]);
             perror(NULL);
             exit(1);
         }
     }
 
+    char *profiles_path;
+    if (argc <= 4) {
+        profiles_path = QUIET_PROFILES_LOCATION;
+    } else {
+        profiles_path = argv[4];
+    }
+
     quiet_encoder_options *encodeopt =
-        quiet_encoder_profile_filename(QUIET_PROFILES_LOCATION, argv[1]);
+        quiet_encoder_profile_filename(profiles_path, argv[1]);
 
     if (!encodeopt) {
-        printf("failed to read profile %s from %s\n", argv[1], QUIET_PROFILES_LOCATION);
+        fprintf(stderr, "failed to read profile %s from %s\n", argv[1], profiles_path);
         exit(1);
     }
 
-    encode_to_wav(input, "encoded.wav", encodeopt);
+    encode_to_wav(input, audiofile, encodeopt);
 
     fclose(input);
     free(encodeopt);
 
     return 0;
